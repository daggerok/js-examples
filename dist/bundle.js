!function(e){var n={};function t(o){if(n[o])return n[o].exports;var r=n[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,t),r.l=!0,r.exports}t.m=e,t.c=n,t.d=function(e,n,o){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:o})},t.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="/js-examples/",t(t.s=0)}([function(e,n,t){"use strict";t.r(n);const o=new class{constructor(){this._counter=0,this._observers=[]}validate(e){if(!e.on)throw Error("Invalid observer contract. Method on is missing. \nPlease implement next contract: on(oldValue, newValue): void")}subscribe(e){this.validate(e),this._observers=[...this._observers,e]}unsubscribe(e){this.validate(e);const n=this._observers.indexOf(e);n>0&&this._observers.splice(n,1)}onCounter(e,n){this._observers.forEach(t=>t.on(e,n))}get counter(){return this._counter}set counter(e){const n=this._counter;this._counter=e,this._counter!=n&&this.onCounter(n,e)}};document.body.innerHTML='\n  <h3 onclick="counterObserver.counter += 1">Counter App</h3>\n  <div id="counter">click on plus or minus</div>\n  <button onclick="increment()"> + </button>\n  <button onclick="decrement()"> - </button>\n';const r=new class{on(e,n){console.log(`handling changes in console:\nold value: ${e}, new value: ${n}`)}},s=new class{constructor(e){this._element=document.querySelector(e)}on(e,n){this._element.textContent=`old value: ${e}; new value: ${n}`}}("#counter");o.subscribe(r),o.subscribe(s),window.increment=((e=1)=>o.counter+=e),window.decrement=((e=1)=>o.counter-=e)}]);